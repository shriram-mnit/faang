class Solution {
public:
    int numIslands(vector<vector<char>>& grid) {
        int m=grid.size();
        int n=grid[0].size();
        vector<vector<int>>vec(m,vector<int>(n,0));
        map<pair<int,int>,list<pair<int,int>>> m1;
        for(int i=0;i<m;i++)
        {  
            for(int j=0;j<n;j++)
            {  if(grid[i][j]=='1'){
                if(i-1>=0 && grid[i-1][j])
                    m1[{i,j}].push_back({i-1,j});
                if(i+1<m && grid[i+1][j])
                    m1[{i,j}].push_back({i+1,j});
                if(j-1>=0 && grid[i][j-1])
                    m1[{i,j}].push_back({i,j-1});
                if(j+1<n && grid[i][j+1])
                    m1[{i,j}].push_back({i,j+1});}
            }
        }
        int cn=0;
        for(int i=0;i<m;i++)
        {
            for(int j=0;j<n;j++)
            {
                if(grid[i][j]=='1' && vec[i][j]==0)
                { cn++;
                    queue<pair<int,int>>q;
                    q.push({i,j});
                    vec[i][j]=1;
                    while(!q.empty())
                    {
                        pair<int,int> p=q.front();
                        q.pop();
                        for(auto x:m1[p])
                        { int a=x.first,b=x.second;
                            if(!vec[a][b])
                            {
                                q.push(x);
                                vec[a][b]=1;
                            }
                        }
                    }
                }
            }
        }
        return cn;
    }
};
